@{
    ViewData["Title"] = "Create New User";
}
@* IdentityUser will act as a model bound directly from the form, containing properties like UserName and Email.
    However, since IdentityUser doesn’t include a Password property, you’ll still need to keep the password parameter separate
*@
<h4>THIS IS A STUDENT PROJECT</h4>
<hr/>
<h2>Create New User</h2>

<form asp-action="CreateUser" method="post">

    <div class="form-group mb-3">
        <label for="username" class="form-label">username</label>
        <input name="username" class="form-control" required />
    </div>

    <div class="form-group mb-3">
        <label for="FirstName" class="form-label">FirstName</label>
        <input name="FirstName" class="form-control" required />
    </div>

    <div class="form-group mb-3">
        <label for="LastName" class="form-label">LastName</label>
        <input name="LastName" class="form-control" required />
    </div>

    <div class="form-group mb-3">
        <label for="email" class="form-label">Email</label>
        <input name="email" type="email" class="form-control" required />
    </div>

    <div class="form-group mb-3">
        <label for="password" class="form-label">Password</label>
        <input name="password" type="password" class="form-control" required />
    </div>

    <button type="submit" class="btn btn-primary">Create User</button>
    <a asp-action="Users" class="btn btn-secondary">Cancel</a>
</form>

<!-- Display validation errors if any exist -->
@if (!ViewData.ModelState.IsValid)

{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))

            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}


